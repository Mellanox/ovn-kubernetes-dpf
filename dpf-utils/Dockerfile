ARG builder_image

FROM --platform=${BUILDPLATFORM} ${builder_image} AS builder

ARG TARGETARCH
ARG gcflags
ARG ldflags

WORKDIR /workspace

ARG ipallocator_dir
COPY ./ ./
COPY go.mod go.mod
COPY go.sum go.sum

RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download

RUN --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -trimpath \
    -ldflags="${ldflags}"  \
    -gcflags="${gcflags}" \
    -o ipallocator ./cmd/ipallocator

RUN --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -trimpath \
    -ldflags="${ldflags}"  \
    -gcflags="${gcflags}" \
    -o dpucniprovisioner ./cmd/dpucniprovisioner

RUN --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -trimpath \
    -ldflags="${ldflags}"  \
    -gcflags="${gcflags}" \
    -o ovnkubernetesresourceinjector ./cmd/ovnkubernetesresourceinjector

# Create source code archive excluding .gocache, and test files.
# Skipping `.gocache` since it contains pre-compiled versions of packages and other build artifacts for speeding up subsequent builds
RUN mkdir src && \
    find . -name '*.go' \
      -not -path "./hack/*" \
      -not -path "./.gocache/*" \
      -not -name "*_test.go" \
      -exec cp --parents {} src/ \; && \
    tar -czf source-code.tar.gz src

# Build the final image
FROM nvcr.io/nvidia/doca/canonical:ubuntu24.04

ARG TARGETARCH

USER root

ARG ubuntu_mirror=http://archive.ubuntu.com/ubuntu/

# Dependencies for installing OVN (Netplan, systemd and udev required by dpucniprovisioner).
ARG PACKAGES="openvswitch-switch netplan.io udev systemd dnsmasq"

RUN dpkg -l | awk '/^ii/{print $2"="$3}' | sort > /initial-dpkg-list.txt

RUN find /etc/apt/sources.list* -type f -exec sed -i \
      -e "s|http://archive.ubuntu.com/ubuntu/|${ubuntu_mirror}|g" \
      -e "s|http://security.ubuntu.com/ubuntu/|${ubuntu_mirror}|g" '{}' \;

RUN apt-get update && \
    apt-get install -y --no-install-recommends ${PACKAGES} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN dpkg -l | awk '/^ii/{print $2"="$3}' | sort > /after-ovn-dpkg-list.txt

RUN mkdir -p /var/run/openvswitch

RUN mkdir -p /usr/libexec/cni/
COPY --from=builder /workspace/ipallocator /ipallocator
COPY --from=builder /workspace/dpucniprovisioner /cniprovisioner
COPY --from=builder /workspace/ovnkubernetesresourceinjector /ovnkubernetesresourceinjector

# Get all the source code
RUN mkdir -p /src
WORKDIR /src

# Copy source code from builder stage
COPY --from=builder /workspace/source-code.tar.gz ovn-kubernetes-source-code.tar.gz

# Download source code for apt packages.
# Starting from Ubuntu 24.04 shifted to the new deb822 format for source management.
# Enable `deb-src` to be able to fetch sources using `apt-get source`
ARG PACKAGE_SOURCES
RUN test "${PACKAGE_SOURCES}" = "false" || ( \
      sed -i 's/^# deb-src/deb-src/g' /etc/apt/sources.list /etc/apt/sources.list.d/* && \
      sed -i 's/^Types: deb$/Types: deb deb-src/g' /etc/apt/sources.list.d/*.sources && \
      apt-get update && \
      apt-get source --download-only ${PACKAGES} && \
      comm -23 /after-ovn-dpkg-list.txt /initial-dpkg-list.txt | xargs -r apt-get source --download-only && \
      apt-get clean && \
      rm -f /initial-dpkg-list.txt /after-ovn-dpkg-list.txt && \
      rm -rf /var/lib/apt/lists/* && \
      cd / && \
      tar -cf source-code.tar /src && \
      rm -rf /src \
    )

LABEL io.k8s.display-name="ovn-kubernetes dpf utilities" \
      io.k8s.description="ovn-kubernetes dpf utilities ubuntu image"

WORKDIR /root
